(: reduct (-> Expression Tree))
;; (=(reduct $expression)
;;     (let* (
;;         ($builtTree  (buildTreeWithRoot $expression))
;;         ($propagateTruthValue (propagateTruthValue $builtTree True))
;;         ($gatherJunctorTree (gatherJunctors $propagateTruthValue NilNode))
;;         (($reducedTree $signal) (reduceToElegance $gatherJunctorTree Nil Nil))
;;     )
;;         $reducedTree
;;     )
;; )
(=(reduct $expression)
    (let $builtTree (buildTreeWithRoot $expression)
        (let () (println! (finished build tree)) 
            (let $propagateTree (propagateTruthValue $builtTree True)
                (let () (println! $propagateTree)
                    (let $gatherJunctorTree (gatherJunctors $propagateTree NilNode)
                        (let () (println! $gatherJunctorTree)
                            (let ($reducedTree $signal) (reduceToElegance $gatherJunctorTree Nil Nil)
                                (if (== $signal DISCONNECT)
                                    True
                                    (if (== $signal DELETE)
                                        False
                                        (if (== $signal KEEP)
                                            $reducedTree
                                            NilNode
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)
