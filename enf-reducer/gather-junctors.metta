! (register-module! ../../metta-moses-reduction)
! (import! &self metta-moses-reduction:types)
! (import! &self metta-moses-reduction:utilities:list-helpers)
! (import! &self metta-moses-reduction:utilities:tree-helpers)

(:gatherJunctors (-> Tree Tree Tree))
(=(gatherJunctors $currentNode $centerNode)
    ;; (if (or (== $currentNode NilNode) (== $centerNode NilNode))
    ;;     NilNode
        (let* (
            ($currentNodeType (getNodeType $currentNode))
            ($centerNodeType (getNodeType $centerNode))
            ($currentLeft (getChild $currentNode L))
            ($currentRight (getChild $currentNode R))
            ((TreeNode (Value $valueName $constraint $currentNodeType) $guardSet $children) $currentNode)
            ;; ((TreeNode (Value $centerName $constraintCenter $centerNodeType) $guardSetCenter $childrenCenter) $currentNode)            
        )
        (if (and (== $currentNodeType ROOT) (not (== $currentRight NilNode)))
            (TreeNode (Value $valueName $constraint AND) Nil (Cons $currentLeft (Cons (gatherJunctors $currentRight $centerNode) Nil)))
            (if (or (== $currentNodeType AND) (== $currentNodeType OR))
                (if  (== $currentNodeType $centerNodeType)
                    (TreeNode (Value $valueName $constraint AND) $guardSet 
                        (Cons (gatherJunctors $currentLeft $centerNode) (Cons (gatherJunctors $currentRight $centerNode) Nil)))    
                    ;; (let* (
                    ;;         ($leftRemovedNode (removeFromChildren $centerNode $currentLeft))
                    ;;         ($duplicateRemovedNode (removeFromChildren $leftRemovedNode $currentRight))
                    ;;         ($newCenterNode (prependChild $duplicateRemovedNode $currentNode))
                    ;;     ) 
                    ;;     (prependChild (prependChild $newCenterNode (gatherJunctors $currentLeft $currentNode)) 
                    ;;         (gatherJunctors $currentRight $currentNode))
                    ;; )
                    ;; (let $removedNode (removeFromChildren $centerNode $currentNode)
                    ;;Replacing the children to nil type of list to stop unnecessary recursion
                    (let* (
                            ($newCurrentLeft (replaceChildren $currentLeft Nil))
                            ($newCurrentRight (replaceChildren $currentRight Nil))
                        )
                        (prependChild $centerNode (TreeNode (Value $valueName $constraint $currentNodeType) $guardSet 
                            (Cons (gatherJunctors $newCurrentLeft $currentNode) (Cons (gatherJunctors $newCurrentRight $currentNode) Nil))))
                    )
                    )
                
                ;;(TreeNode (Value $valueName $constraint AND) $guardSet (Cons (gatherJunctors $currentLeft $centerNode) (Cons (gatherJunctors $currentRight $centerNode) Nil)))
                (if (== $currentNodeType LITERAL)
                    (if (== $centerNodeType AND)
                        (prependToGuardSet $centerNode $currentNode)
                        (prependChild $centerNode (TreeNode (Value $valueName $constraint AND) (Cons $currentNode Nil) $children))
                    )
                    NilNode
                )
                    
            )
        )
        

        )
    ;; )
)
(:gather-junctor (-> Tree Tree))
(=(gather-junctor $treeNode)
    (if (== $treeNode NilNode)
        $treeNode
        (let* (
                ($left (getChild $treeNode L))
                ($right (getChild $treeNode R))
                ($rightNodeType (getNodeType $right))
                ($leftNodeType (getNodeType $left))
                ((TreeNode (Value $valueName $constraint $nodeType) $guardSet $children) $treeNode)
            )
            (if (== $nodeType ROOT)
                (if (not (== $right NilNode))
                    (TreeNode (Value $valueName $constraint AND) $guardSet (Cons $left (Cons (gather-junctor $right) Nil)))
                    $treeNode
                )
                (if (or (== $nodeType AND) (== $nodeType OR))
                    (if (and (== $leftNodeType $nodeType) (== $rightNodeType $nodeType))
                        (TreeNode (Value $valueName $constraint AND) $guardSet 
                                (Cons (gather-junctor $left) (Cons (gather-junctor $right) Nil)))
                        (if (== $leftNodeType $nodeType)
                            (TreeNode (Value $valueName $constraint $nodeType) $guardSet 
                                (Cons (gather-junctor $left) (Cons $right Nil)))
                            (if (== $rightNodeType $nodeType)
                                (TreeNode (Value $valueName $constraint $nodeType) $guardSet
                                    (Cons $left (Cons (gather-junctor $right) Nil))
                                )
                                (prependChild (prependChild (replaceChildren $treeNode Nil) (gather-junctor $left)) (gather-junctor $right))
                            )
                        )  
                    )
                    (if (or (== $leftNodeType LITERAL) (== $rightNodeType LITERAL))
                        (if (== $nodeType AND)
                            (if (and (== $leftNodeType LITERAL) (== $rightNodeType LITERAL))
                                (prependToGuardSet (prependToGuardSet $treeNode $left) $right)
                                (if (== $leftNode LITERAL)
                                    (prependToGuardSet $treeNode $left)
                                    (prependToGuardSet $treeNode $right)                                   
                                )
                            )
                            (prependToGuardSet (prependToGuardSet $treeNode $left) $right)
                        )
                        (prependToGuardSet (prependToGuardSet $treeNode $left) $right)
                    )
                )
            )
               
        )
    )
)


(=(gatherJunctorRunner $treeNode)
    (gatherJunctors $treeNode NilNode)
)
(= (checker $treeNode)
    (if (== (getNodeType $treeNode) ROOT) True False)
)
!(checker (TreeNode (Value Nil False ROOT) Nil (Cons NilNode (Cons (TreeNode (Value Nil False OR) Nil (Cons (TreeNode (Value a True LITERAL) Nil Nil) (Cons (TreeNode (Value Nil False AND) Nil (Cons (TreeNode (Value b True LITERAL) Nil Nil) (Cons (TreeNode (Value c True LITERAL) Nil Nil) Nil))) Nil))) Nil))))
!(gather-junctor (TreeNode (Value Nil False AND) Nil (Cons (TreeNode (Value a True LITERAL) Nil Nil) (Cons (TreeNode (Value Nil False AND) Nil (Cons (TreeNode (Value b True LITERAL) Nil Nil) (Cons (TreeNode (Value c True LITERAL) Nil Nil) Nil))) Nil))))